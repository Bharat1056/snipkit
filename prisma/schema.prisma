generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  email           String  @unique
  username        String  @unique
  fullName        String
  password        String
  folderStructure Json?
  codes           Code[]  @relation("UserCodes")
  media           Media[] @relation("UserMedia")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  // Optional for email/password authentication

  // Optional for WebAuthn support
  authenticators Authenticator[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Code {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  slug            String   @unique
  title           String
  description     String?
  s3Key           String
  language        Language @default(JAVASCRIPT)
  exploitLocation String
  access          Access   @default(public)

  userId String @db.ObjectId
  user   User?  @relation("UserCodes", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  slug        String    @unique
  title       String
  description String?
  filename    String
  s3Key       String
  contentType String
  fileSize    Int
  mediaType   MediaType
  access      Access    @default(public)
  signedUrl   String?

  userId String @db.ObjectId
  user   User?  @relation("UserMedia", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Language {
  JAVASCRIPT
  TYPESCRIPT
  PYTHON
  GO
  RUST
  JAVA
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Access {
  private
  public
}
